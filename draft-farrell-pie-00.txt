


Network Working Group                                         S. Farrell
Internet-Draft                                    Trinity College Dublin
Intended status: Experimental                            January 2, 2014
Expires: July 6, 2014


                    Privacy Friendly Key Identifiers
                          draft-farrell-pie-00

Abstract

   This memo describes a privacy friendly form of key identifier that
   can be used in cryptographic protocols.  We identify a key via a hash
   value but over-the-wire send that value XORed with a randomly
   selected set of bits as the key identifier.  We use the term 'PIE'
   for such identifiers, standing for Privately Identified Encryption.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on July 6, 2014.

Copyright Notice

   Copyright (c) 2014 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.






Farrell                   Expires July 6, 2014                  [Page 1]

Internet-Draft      Privacy Friendly Key Identifiers        January 2014


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . . . 3
   2.  Making a PIE  . . . . . . . . . . . . . . . . . . . . . . . . . 4
   3.  Formating . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
   4.  Analysis  . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
     4.1.  What Hamming Distance?  . . . . . . . . . . . . . . . . . . 5
     4.2.  Repeating Yourself  . . . . . . . . . . . . . . . . . . . . 5
     4.3.  Bad Guy Knows Hash Input  . . . . . . . . . . . . . . . . . 5
     4.4.  Seeing Many Protocols Runs  . . . . . . . . . . . . . . . . 6
   5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . . . 6
   6.  Security Considerations . . . . . . . . . . . . . . . . . . . . 6
   7.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . 6
   8.  References  . . . . . . . . . . . . . . . . . . . . . . . . . . 6
     8.1.  Normative References  . . . . . . . . . . . . . . . . . . . 6
     8.2.  Informative References  . . . . . . . . . . . . . . . . . . 6
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . . . 7


































Farrell                   Expires July 6, 2014                  [Page 2]

Internet-Draft      Privacy Friendly Key Identifiers        January 2014


1.  Introduction

   [[Comments and things to change in obvious ways are in double-square
   brackets like this.]]

   Current digital signature and key agreement mechanisms (such as used
   for the Cryptographis Message Syntax (CMS) [RFC5652], inherently
   involve some form of key identifier that allows tracking, since the
   key identifier normally maps 1:1 (or one to some small value) to a
   protocol identitifer such as an email address.  If such a key
   identifier accompanies some ciphertext, then it can identify the
   intended recipient.  If it accompanies a signature then it can
   identify the sender.  If it accompanies a message authentication code
   (MAC) then it can identity both sender and recipient.

   Such identification need not be immediate, that is, the information
   that "leaks" may not be obviously bound to an individual person at
   the moment when some packets are recorded, but may later be
   associated with an individual through other means, for example, if a
   destination IP address is later associated with a person.  Repeated
   use of the same key identifier can therefore expose some information
   that we might not wish to have exposed.

   And since cryptographically assured confidentiality and data origin
   authentication are the basis for many higher level security services
   there therefore seems to be merit to define a method for Privately
   Identifing Encryption (PIE), that can be used efficiently at scale,
   so that even a database of millions of keys can be efficiently
   searched using our privacy-friendly form of key identifier.

   The basic idea is to identify keys via values that are a hash of
   something, XORed with a randomly selected set of bits, so that the
   PIE for the same key will be different each time.  The thing that is
   hashed will vary in different cases, but will have to be defined for
   any PIE consuming protocol.  Since PIEs however can probably be used
   in many protocols that already support opaque key identifiers, so
   long as there is a bit somewhere to indicate that we are using PIEs,
   it should be quite feasible to retro-fit many protocols to become
   PIE-throwing protocols.

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].  This
   specification uses the Augmented Backus-Naur Form (ABNF) notation of
   [RFC5234].






Farrell                   Expires July 6, 2014                  [Page 3]

Internet-Draft      Privacy Friendly Key Identifiers        January 2014


2.  Making a PIE

   To start we need something to hash.  For a signature, the relevant
   public key would seem appropriate and the same is true for
   asymmetrically encrypted ciphertext and key agreement messages.  For
   symmetrically protected data, the value to be hashed can be agreed
   out of band or via some other protocol.  Where necessary we'll refer
   to the input to the hash function as the PIE-crust.

   And stretching the analogy, we'll refer the the value XORed with the
   hash of the PIE-crust, as the PIE-filling.  So we therefore have:

                  PIE ::== Hash(PIE-crust) XOR PIE-filling

                        Figure 1: PIE construstion

   In all cases, if the PIE-crust can readily be associated with the PIE
   by an adversary then the adversary wins something.  So for example, a
   PIE-crust that is a straight hash of a public key that is publicly
   available in an accessible public key certificate might not produce
   as good an improvement in privacy as can be achieved.  Nonetheless,
   it may be that in some situations, even a knowable PIE-crust might
   not be fatal, but PIE-throwing protocols will need to analyse this
   aspect.

   Note that a PIE might match more than one PIE-crust, but that is
   acceptable since the purpose of the PIE is to help avoid tracking
   based on PIE-crust values or equivalents and even with quite few
   random hash bits in the PIE, it is very likely that only very few
   PIE-crusts match the PIE.

   With this scheme a 3rd party watching just the PIE-throwing protocol
   appears not to be able to easily correlate signatures with accounts
   unless it also has relevant records from e.g. a verifier database or
   can watch (or trigger) the relevant protocol a very large number of
   times, or can watch other protocols that might expose the PIE-crust.
   Note that that last situation should also be considered for PIE-
   throwing protocols.  [I-D.farrell-perpass-attack]


3.  Formating

   A PIE does not require a new format.  Instead, we require that both
   peers in a communication need to be aware that PIEs are being used
   instead of traditional key identifiers.  If a PIE-throwing protocol
   requires differentiation between traditional key identifiers and
   PIEs, then that protocol needs to signal that difference in some
   sensible way.  Otherwise, PIEs are essentially bit strings that can



Farrell                   Expires July 6, 2014                  [Page 4]

Internet-Draft      Privacy Friendly Key Identifiers        January 2014


   be encoded in all of the various ways that other key identifiers have
   been in various protocols.


4.  Analysis

   In this section, we consider the strengths and weaknesses of this
   scheme and what might be reasonable parameters to use.

4.1.  What Hamming Distance?

   The number of non-zero bits in the PIE-filling that allow for
   efficient verification of a signature will depend on the size of the
   verifier database, i.e., the number of possible signers.

   GOT HERE; OLD TEXT BELOW

   With 27 indices and a large verifier database of 2^32 public keys, a
   verifier would likely only have to check about 4 signatures to check
   authentication and determine if the PIE and signature matches a known
   public key.  Such an additional load should be acceptable with e.g.
   the RSA algorithm as normally used with a short public exponent, but
   might be problematic in the case of static-static D-H key agreement
   schemes, though those are not in common use.

   For a population of 2^i keys, if we use i-j indices in our PIEs, then
   one PIE is likely to match 2^j keys, meaning that the verifier may
   have to check 2^(j-1) keys in order to do a successful signature
   verification and 2^j signature checks to determine failure.

   Note that the 27 indices is the largest number of indices that
   results in a PIE that is shorter than the underlying hash value.

4.2.  Repeating Yourself

   Clearly, if one sends many PIEs for the just one PIE crust,
   eventually a passive attacker who sees and can distinguish the source
   of all of those could reconstruct the hash of the PIE crust.  With a
   256 bit underlying hash, and sending 16 bits per PIE, we expose
   almost all of the full hash to that attacker very quickly.

4.3.  Bad Guy Knows Hash Input

   [[TBD - examples of how it might happen and impact.]]







Farrell                   Expires July 6, 2014                  [Page 5]

Internet-Draft      Privacy Friendly Key Identifiers        January 2014


4.4.  Seeing Many Protocols Runs

   [[TBD - how many times does the bad guy need to see this to win?]]


5.  IANA Considerations

   This memo defines an abstract scheme that is not used by any protocol
   at present.  Were it to be used, then the protocol making use of the
   scheme should create any registries or codepoints required.


6.  Security Considerations

   This memo is all about security so most has been said.  However,
   implementations, particularly on constrained devices need to take a
   lot of care with random number generation and seeding pseudo random
   number generators as the security of the scheme could be completely
   undermined by use of predictable sequences of key identifier values.
   [RFC4086] provides guidance on ways in which pseudo-randomn numbers
   can be generated.


7.  Acknowledgements

   Thanks to the following folks who provided comments: [[whoever's
   interested, if any]]


8.  References

8.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC5234]  Crocker, D. and P. Overell, "Augmented BNF for Syntax
              Specifications: ABNF", STD 68, RFC 5234, January 2008.

8.2.  Informative References

   [I-D.farrell-perpass-attack]
              Farrell, S. and H. Tschofenig, "Pervasive Monitoring is an
              Attack", draft-farrell-perpass-attack-00 (work in
              progress), November 2013.

   [RFC4086]  Eastlake, D., Schiller, J., and S. Crocker, "Randomness
              Requirements for Security", BCP 106, RFC 4086, June 2005.



Farrell                   Expires July 6, 2014                  [Page 6]

Internet-Draft      Privacy Friendly Key Identifiers        January 2014


   [RFC5652]  Housley, R., "Cryptographic Message Syntax (CMS)", STD 70,
              RFC 5652, September 2009.


Author's Address

   Stephen Farrell
   Trinity College Dublin
   Dublin,   2
   Ireland

   Phone: +353-1-896-2354
   Email: stephen.farrell@cs.tcd.ie






































Farrell                   Expires July 6, 2014                  [Page 7]

