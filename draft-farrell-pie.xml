<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC4086 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4086.xml">
<!ENTITY RFC5652 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5652.xml">
<!ENTITY RFC5234 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC6920 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6920.xml">
<!ENTITY RFC6982 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6982.xml">
<!ENTITY I-D.farrell-perpass-attack SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.farrell-perpass-attack.xml">
]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<rfc category="exp" ipr="trust200902" submissionType="independent" docName="draft-farrell-pie-00">
<front>
<title abbrev="Privacy Friendly Key Identifiers">Privacy Friendly Key Identifiers</title>

<author fullname="Stephen Farrell" initials="S." 
surname="Farrell">
<organization>Trinity College Dublin</organization>
<address>
<postal>
<street></street>
<city>Dublin</city>
<region></region>
<code>2</code>
<country>Ireland</country>
</postal>
<phone>+353-1-896-2354</phone>
<email>stephen.farrell@cs.tcd.ie</email>
</address>
</author>

<date/>

<area>IETF</area>

<workgroup>Network Working Group</workgroup>
<keyword>cryptographic key identifier privacy</keyword>

<abstract>
<t>

This memo describes a privacy friendly form of key identifier that can be used
in cryptographic protocols.  We identify a key via a hash value but
over-the-wire send that value XORed with a randomly selected set of bits as the
key identifier.  We use the term 'PIE' for such identifiers, standing for
Privately Identified Encryption.

</t>

</abstract>
</front>

<middle>

<section title="Introduction">

<t>
[[Comments and things to change in obvious ways are in double-square
brackets like this. In particular, note that this scheme is not yet
serious - its just an idea that may well turn out to be crap.]]</t>

<t>
Current digital signature and key agreement mechanisms (such as used for the
Cryptographis Message Syntax (CMS)
<xref target="RFC5652"/>, inherently involve some form of key
identifier that allows tracking, since the key identifier normally maps 1:1 (or
one to some small value) to a protocol identitifer such as an email address. If
such a key identifier accompanies some ciphertext, then it can identify the
intended recipient. If it accompanies a signature then it can identify the
sender. If it accompanies a message authentication code (MAC) then it can
identity both sender and recipient. 
</t>

<t>
Such identification need not be immediate, that is, the information that
"leaks" may not be obviously bound to an individual person at the moment
when some packets are recorded, but may later be associated with an individual
through other means, for example, if a destination IP address is 
later associated with a person. Repeated use of the same key identifier
can therefore expose some information that we might not wish to
have exposed.
</t>

<t>

And since cryptographically assured confidentiality and data origin
authentication are the basis for many higher level security services
there therefore seems to be merit to define a method for Privately Identifing
Encryption (PIE),
that can be used efficiently at scale, so that even a
database of millions of keys can be efficiently searched using our
privacy-friendly form of key identifier.
</t>

<t>

The basic idea is to identify keys via values that are a hash of
something, XORed with a randomly selected set of
bits, so that the PIE for the same key will be 
different each time. The thing that is hashed will vary in 
different cases, but will have to be defined for any PIE
consuming protocol. Since PIEs however can probably be used
in many protocols that already support opaque key 
identifiers, so long as there is a bit somewhere to indicate
that we are using PIEs, it should be quite feasible
to retro-fit many protocols to become PIE-throwing protocols.

</t>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document
are to be interpreted as described in <xref target="RFC2119"/>.  This
specification uses the Augmented Backus-Naur Form (ABNF) notation of 
<xref target="RFC5234"/>.  </t>

</section>

<section title="Making a PIE">

<t>
To start we need something to hash. For a signature, the relevant public key
would seem appropriate and the same is true for asymmetrically encrypted
ciphertext and key agreement messages. For symmetrically protected data, the
value to be hashed can be agreed out of band or via some other protocol.  
Where necessary we'll refer to the input to the hash function as the PIE-crust.

</t>

<t>

And stretching the analogy, we'll refer the the value XORed with the hash
of the PIE-crust, as the PIE-filling. So we therefore have:
</t>

<figure title="PIE construstion" anchor="fig_pie_formula">
<artwork align="left" align="center"><![CDATA[
PIE ::== Hash(PIE-crust) XOR PIE-filling
]]></artwork>
</figure>

<t>
In all cases, if the PIE-crust can readily be associated
with the PIE by an adversary then the adversary wins something. So for example, 
a PIE-crust that is a straight hash of a public key that is publicly 
available in an accessible public key certificate might not produce as good an
improvement in privacy as can be achieved. Nonetheless, it may be
that in some situations, even a knowable PIE-crust might not be
fatal, but PIE-throwing protocols will need to analyse this aspect.
</t>

<t>
Note that 
a PIE might match more than one PIE-crust, but that is acceptable 
since the purpose of the PIE is to help avoid tracking based on 
PIE-crust values or equivalents and even with quite few random
hash bits in the PIE, it is very likely that only very few 
PIE-crusts match the PIE.
</t>

<t>
With this scheme a 3rd party watching just the PIE-throwing protocol appears not to be able to
easily correlate signatures with accounts unless it also has relevant records
from e.g. a verifier database or can watch (or trigger) the relevant protocol a
very large number of times, or can watch other protocols that might expose
the PIE-crust. Note that that last situation should also be considered 
for PIE-throwing protocols. <xref target="I-D.farrell-perpass-attack"/>

</t>

</section>

<section title="Formating">

<t>

A PIE does not require a new format. Instead, we require that both
peers in a communication need to be aware that PIEs are being used
instead of traditional key identifiers. If a PIE-throwing protocol
requires differentiation between traditional key identifiers and
PIEs, then that protocol needs to signal that difference in some
sensible way.

Otherwise, PIEs are essentially bit strings that can be encoded
in all of the various ways that other key identifiers have been
in various protocols.


</t>

</section>

<section title="Analysis">

<t>

In this section, we consider the strengths and weaknesses of this scheme and
what might be reasonable parameters to use.

</t>

<section title="What Hamming Distance?">

<t>The number of non-zero bits in the PIE-filling that allow for
efficient verification
of a signature will depend on the size of the verifier database, i.e.,
the number of possible signers. 
</t>

<!--
<t>
GOT HERE; OLD TEXT BELOW
</t>

<t>
With 27 indices and a large verifier database
of 2^32 public keys, a verifier would likely only have to check about 4
signatures to check authentication and determine if the PIE and signature
matches a known public key. Such an additional load should be acceptable with
e.g. the RSA algorithm as normally used with a short public exponent, but might
be problematic in the case of static-static D-H key agreement schemes, though
those are not in common use.  </t>

<t>For a population of 2^i keys, if we use i-j indices in our PIEs,
then one PIE is likely to match 2^j keys, meaning that the verifier
may have to check 2^(j-1) keys in order to do a successful signature
verification and 2^j signature checks to determine failure.</t>

<t>Note that the 27 indices is the largest number of indices that results
in a PIE that is shorter than the underlying hash value. 
</t>
-->

</section>

<!--

<section title="Repeating Yourself">

<t>
Clearly, if one sends many PIEs for the just one PIE crust, 
eventually a passive attacker who sees and can 
distinguish the source of all of those could reconstruct the hash of
the PIE crust. With a 256 bit underlying hash, and sending
16 bits per PIE, we expose almost all of the full hash to
that attacker very quickly. 
</t>



</section>

<section title="Bad Guy Knows Hash Input">

<t>

[[TBD - examples of how it might happen and impact.]]

</t>

</section>
-->

<section title="Seeing Many Protocols Runs">

<t>
[[TBD - how many times does the bad guy need to see this
to win?]]

</t>

</section>

</section>

<section title="IANA Considerations">

<t>
This memo defines an abstract scheme that is not used by any protocol at
present. Were it to be used, then the protocol making use of the scheme should
create any registries or codepoints required.

</t>

</section>


<!--
<section title="Implementation Status">

<t>[[Note to RFC editor - please delete this section before publication.]]</t>

<t>
    This section records the status of known implementations of the
      protocol defined by this specification at the time of posting of
      this Internet-Draft, and is based on a proposal described in 
      <xref target="RFC6982"/>.  The description
      of implementations in this section is intended to assist the IETF
      in its decision processes in progressing drafts to RFCs.  Please
      note that the listing of any individual implementation here does
      not imply endorsement by the IETF.  Furthermore, no effort has
      been spent to verify the information presented here that was
      supplied by IETF contributors.  This is not intended as, and must
      not be construed to be, a catalog of available implementations or
      their features.  Readers are advised to note that other
      implementations may exist.
</t>
<t>
      According to 
      <xref target="RFC6982"/>
      "this will allow reviewers and working groups to assign
      due consideration to documents that have the benefit of running
      code, by considering the running code as evidence of valuable
      experimentation and feedback that has made the implemented
      protocols more mature.  It is up to the individual working groups
      to use this information as they see fit".
</t>

<t>
There is an initial BSD-licensed implementation used to generate
the examples here available at https://github.com/sftcd/pie.
There is currently no verifier-side implementation for efficiently
searching matching a PIE with a set of PIE-crusts.
</t>

</section>
-->

<section title="Security Considerations">

<t>

This memo is all about security so most has been said. However,
implementations, particularly on constrained devices need to take a lot of care
with random number generation and seeding pseudo random number generators as
the security of the scheme could be completely undermined by use of predictable
sequences of key identifier values. <xref target="RFC4086"/> provides guidance
on ways in which pseudo-randomn numbers can be generated.

</t>

</section>

<section title="Acknowledgements">

<t>
Thanks to the following folks who provided comments:

[[whoever's interested, if any]]

</t>

</section>

</middle>

<back>

<references title="Normative References">
&RFC2119;
&RFC5234;
</references>

<references title="Informative References">
&RFC4086;
&RFC5652;
<!--
&RFC6982;
-->
&I-D.farrell-perpass-attack;
</references>

</back>

</rfc>
