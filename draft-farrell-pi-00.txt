


Network Working Group                                         S. Farrell
Internet-Draft                                    Trinity College Dublin
Intended status: Standards Track                       December 29, 2013
Expires: July 2, 2014


                    Privacy Friendly Key Identifiers
                          draft-farrell-pi-00

Abstract

   This memo describes a privacy friendly form of key identifier that
   can be used in cryptographic protocols.  The basic idea is to
   identify a key via a hash value and to use a randomly selected subset
   of the hash value bits as the key identifier.  We use the term 'PIE'
   for such identifiers, standing for Privately Identified Encryption.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on July 2, 2014.

Copyright Notice

   Copyright (c) 2013 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.






Farrell                   Expires July 2, 2014                  [Page 1]

Internet-Draft      Privacy Friendly Key Identifiers       December 2013


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . . . 3
   2.  Making a PIE  . . . . . . . . . . . . . . . . . . . . . . . . . 3
   3.  Formats . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
     3.1.  ASCII Format  . . . . . . . . . . . . . . . . . . . . . . . 4
     3.2.  Binary Format . . . . . . . . . . . . . . . . . . . . . . . 5
     3.3.  Examples  . . . . . . . . . . . . . . . . . . . . . . . . . 6
   4.  Analysis  . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
     4.1.  Identifying the Wrong Key . . . . . . . . . . . . . . . . . 6
     4.2.  Repeating Yourself  . . . . . . . . . . . . . . . . . . . . 7
     4.3.  Bad Guy Knows Hash Input  . . . . . . . . . . . . . . . . . 7
     4.4.  Seeing Many Protocols Runs  . . . . . . . . . . . . . . . . 7
   5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . . . 7
   6.  Implementation Status . . . . . . . . . . . . . . . . . . . . . 7
   7.  Security Considerations . . . . . . . . . . . . . . . . . . . . 8
   8.  Implementation Considerations . . . . . . . . . . . . . . . . . 8
   9.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . 8
   10. References  . . . . . . . . . . . . . . . . . . . . . . . . . . 8
     10.1. Normative References  . . . . . . . . . . . . . . . . . . . 8
     10.2. Informative References  . . . . . . . . . . . . . . . . . . 8
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . . . 9





























Farrell                   Expires July 2, 2014                  [Page 2]

Internet-Draft      Privacy Friendly Key Identifiers       December 2013


1.  Introduction

   [[Comments and things to change in obvious ways are in double-square
   brackets like this.]]

   Current digital signature and key agreement mechanisms (such as used
   for the Cryptographis Message Syntax (CMS) [RFC5652] ), inherently
   involve some form of key identifier that allows tracking, since the
   key identifier normally maps 1:1 (or one to some small value) to a
   protocol identitifer such as an email address.  If such a key
   identifier accompanies some ciphertext, then it can identify the
   intended recipient.  If it accompanies a signature then it can
   identify the sender.  If it accompanies a message authentication code
   (MAC) then it can identity both sender and recipient.

   Such identification need not be immediate, that is, the information
   that "leaks" may not be obviously bound to an individual person at
   the moment when some packets are recorded, but may later be
   associated with an individual through other means, for example, if a
   destination IP address is later associated with a person.  Repeated
   use of the same key identifier can therefore expose some information
   that we might not wish to have exposed.

   There therefore seems to be merit to define a method for Privately
   Identifing Encryption (PIE), that can be used efficiently at scale,
   so that even a database of millions of keys can be efficiently
   searched using our privacy-friendly form of key identifier.

   The basic idea is to identify keys via values that are a hash of
   something, and to identify the key via a randomly selected set of
   bits of the hash, so that the PIE for the same key will be different
   each time.  The thing that is hashed will vary in different cases,
   but will have to be defined for any PIE consuming protocol.  Since
   PIEs however can probably be used in many protocols that already
   support opaque key identifiers, so long as there is a bit somewhere
   to indicate that we are using PIEs, it should be quite feasible to
   retro-fit many protocols to become PIE-throwing protocols.

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].  This
   specification uses the Augmented Backus-Naur Form (ABNF) notation of
   [RFC5234].


2.  Making a PIE

   To start we need something to hash.  For a signature, the relevant



Farrell                   Expires July 2, 2014                  [Page 3]

Internet-Draft      Privacy Friendly Key Identifiers       December 2013


   public key would seem appropriate and the same is true for
   asymmetrically encrypted ciphertext and key agreement messages.  For
   symmetrically protected data, the value to be hashed can be agreed
   out of band or via some other protocol.  Where necessary we'll refer
   to the input to the hash function as the PIE-crust.

   In all cases, if the PIE-crust can readily be associated with the PIE
   by an adversary then the adversary wins something.  So for example, a
   PIE-crust that is a straight hash of a public key that is publicly
   available in an accessible public key certificate might not produce
   as good an improvement in privacy as can be achieved.  Nonetheless,
   it may be that in some situations, even a knowable PIE-crust might
   not be fatal, but PIE-throwing protocols will need to analyse this
   aspect.

   Given a good hash function, each bit of hash output can be referenced
   via an index and a randomly selected set of those indices, together
   with the associated hash output bits constitutes the PIE.  An easy
   enough recipe!  Note that a PIE might match more than one PIE-crust,
   but that is acceptable since the purpose of the PIE is to help avoid
   tracking based on PIE-crust values or equivalents and even with quite
   few random hash bits in the PIE, it is very likely that only very few
   PIE-crusts match the PIE.

   With this scheme a 3rd party watching just the PIE-throwing protocol
   appears not to be able to easily correlate signatures with accounts
   unless it also has relevant records from e.g. a verifier database or
   can watch (or trigger) the relevant protocol a very large number of
   times, or can watch other protocols that might expose the PIE-crust.
   Note that that last situation should also be considered for PIE-
   throwing protocols.  [I-D.farrell-perpass-attack]


3.  Formats

   A PIE is formed from an identiifer for the hash function, the number
   of indices to be used, a set of (randomly selected) indices, and a
   set of hash value bits.  We define two formats for PIEs - an ASCII
   format and a binary format.

3.1.  ASCII Format

   Figure 1 provides the ABNF for the ASCII format PIE.








Farrell                   Expires July 2, 2014                  [Page 4]

Internet-Draft      Privacy Friendly Key Identifiers       December 2013


              PIE = [ alg ] ":" nindices ":" indices ":" bits
              alg = 1*2DIGIT
              nindices = 1*3DIGIT
              indices = unreserved
              bits = unreserved


                        Figure 1: PIE ASCII Format

   The fields in an ASCII PIE are:

   o  alg: specifies the hash function used, 0 meaning sha-256, and with
      0 as the default.

   o  nindices: specifies how many index bits are present, a value
      between 1 and 128 (but useful values are likely between 16 and
      24). nindices MUST be a multiple of 4 for a precisely equivalent
      binary PIE to be mappable to this ASCII PIE.

   o  indices: is a catenation of 3 character values, each representing
      an index values, e.g. "001067" would represent two indices, the
      first being position 1 (the 2nd most significant bit) and the
      second being the 67th bit of the hash value.

   o  bits: an ASCII-HEX encoding of the values found at the relevant
      indices of the hash value.  If nindices is not a multiple of 4,
      then additional bits are added to the right.  Those padding bits
      SHOULD be random.

3.2.  Binary Format

   Figure 2 describes the binary format PIE.

   0123456701234567012345670123456701234567012345670123456701234567
   +--+----+--------------------...+---------------------------...+
   |A |  N |...4*N 1byte indices...| ... 4*N indexed-hash bits ...|
   +--+----+--------------------...+---------------------------...+

                        Figure 2: PIE Binary Format

   The fields in a binary format PIE are as in the ascii format but with
   some restrictions:

   o  alg: a 3-bit value specifying the hash function used, 0 meaning
      sha-256

   o  nindices: a 5-bit value specifies how many index bits are present,
      a value between 1 and 15 (but useful values are likely between 4



Farrell                   Expires July 2, 2014                  [Page 5]

Internet-Draft      Privacy Friendly Key Identifiers       December 2013


      and 6).  There are 4 times as many indices present as represented
      here in order to ensure that the entire binary PIE requires no
      padding.

   o  indices: is a catenation of 1 octet values, each representing an
      index value, e.g. "0143"H would represent two indices, the first
      being position 1 (the 2nd most significant bit) and the second
      being the 67th bit of the hash value.

   o  bits: the values found at the relevant indices of the hash value.
      If N is not a multiple of 8, then an additional 4 bits of padding
      are to be added as the rightmost bits of this field.  Those
      padding bits SHOULD be random.

3.3.  Examples

   In this section we re-use the example values from Section 8.2 of
   [RFC6920], so we are using SHA-256 with the PIE-crust being the
   subject public key information used in that example.

   The number of indices required to efficiently determine the right key
   to use to verify a signature will depend on the size of the verifier
   database, i.e., the number of possible signers.  With 20 indices and
   a large verifier database of 2^24 public keys, a verifier would
   likely only have to check about 8 signatures to check authentication
   and determine if the PIE and signature matches a known public key.
   Such an additional load should be acceptable with e.g. the RSA
   algorithm as normally used with a short public exponent, but might be
   problematic in the case of static-static D-H key agreement schemes,
   though those are not in common use.


4.  Analysis

   In this section, we consider the strengths and weaknesses of this
   scheme and what might be reasonable parameters to use.

4.1.  Identifying the Wrong Key

   If we assume that the underlying hash function is strong and
   collision resistant then sending a full hash value would presumably
   ensure that we could ignore the probability of a collision, where a
   key identifier matches more than one key.  Since we are only sending
   some key bits, it is possible that our 'pi' value







Farrell                   Expires July 2, 2014                  [Page 6]

Internet-Draft      Privacy Friendly Key Identifiers       December 2013


4.2.  Repeating Yourself

   Since we are only sending a subset of the hash bits, we do however,
   need to estimate how many are needed, for a given size of key
   population and a given frequency of use. [[...and that's TBD...]]

4.3.  Bad Guy Knows Hash Input

   [[TBD - examples of how it might happen and impact.]]

4.4.  Seeing Many Protocols Runs

   [[TBD - how many times does the bad guy need to see this to win?]]


5.  IANA Considerations

   This memo defines an abstract scheme that is not used by any protocol
   at present.  Were it to be used, then the protocol making use of the
   scheme should create any registries or codepoints required.


6.  Implementation Status

   [[Note to RFC editor - please delete this section before
   publication.]]

   This section records the status of known implementations of the
   protocol defined by this specification at the time of posting of this
   Internet-Draft, and is based on a proposal described in [RFC6982].
   The description of implementations in this section is intended to
   assist the IETF in its decision processes in progressing drafts to
   RFCs.  Please note that the listing of any individual implementation
   here does not imply endorsement by the IETF.  Furthermore, no effort
   has been spent to verify the information presented here that was
   supplied by IETF contributors.  This is not intended as, and must not
   be construed to be, a catalog of available implementations or their
   features.  Readers are advised to note that other implementations may
   exist.

   According to [RFC6982] "this will allow reviewers and working groups
   to assign due consideration to documents that have the benefit of
   running code, by considering the running code as evidence of valuable
   experimentation and feedback that has made the implemented protocols
   more mature.  It is up to the individual working groups to use this
   information as they see fit".

   There is an initial BSD-licensed implementation used to generate the



Farrell                   Expires July 2, 2014                  [Page 7]

Internet-Draft      Privacy Friendly Key Identifiers       December 2013


   examples here available at https://github.com/sftcd/pie.  There is
   currently no verifier-side implementation.


7.  Security Considerations

   This memo is all about security so most has been said.  However,
   implementations, particularly on constrained devices need to take a
   lot of care with random number generation and seeding pseudo random
   number generators as the security of the scheme could be completely
   undermined by use of predictable sequences of key identifier values.
   [RFC4086] provides guidance on ways in which pseudo-randomn numbers
   can be generated.


8.  Implementation Considerations

   [[TBD - write code then try Yaron's idea.]]


9.  Acknowledgements

   Thanks to the following folks who provided comments: [[whoever's
   interested, if any]]


10.  References

10.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC5234]  Crocker, D. and P. Overell, "Augmented BNF for Syntax
              Specifications: ABNF", STD 68, RFC 5234, January 2008.

10.2.  Informative References

   [I-D.farrell-perpass-attack]
              Farrell, S. and H. Tschofenig, "Pervasive Monitoring is an
              Attack", draft-farrell-perpass-attack-00 (work in
              progress), November 2013.

   [RFC4086]  Eastlake, D., Schiller, J., and S. Crocker, "Randomness
              Requirements for Security", BCP 106, RFC 4086, June 2005.

   [RFC5652]  Housley, R., "Cryptographic Message Syntax (CMS)", STD 70,
              RFC 5652, September 2009.



Farrell                   Expires July 2, 2014                  [Page 8]

Internet-Draft      Privacy Friendly Key Identifiers       December 2013


   [RFC6920]  Farrell, S., Kutscher, D., Dannewitz, C., Ohlman, B.,
              Keranen, A., and P. Hallam-Baker, "Naming Things with
              Hashes", RFC 6920, April 2013.

   [RFC6982]  Sheffer, Y. and A. Farrel, "Improving Awareness of Running
              Code: The Implementation Status Section", RFC 6982,
              July 2013.


Author's Address

   Stephen Farrell
   Trinity College Dublin
   Dublin,   2
   Ireland

   Phone: +353-1-896-2354
   Email: stephen.farrell@cs.tcd.ie

































Farrell                   Expires July 2, 2014                  [Page 9]

